<?php

namespace MFB\FeedbackBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;
use MFB\FeedbackBundle\Specification\SpecificationInterface;
use MFB\FeedbackBundle\Specification as Spec;
use Doctrine\ORM\NoResultException;
/**
 * FeedbackRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FeedbackRepository extends EntityRepository
{
    protected $qb;

    public function findSortedByAccountId($accountId)
    {
        return $this->getEntityManager()->getRepository('MFBFeedbackBundle:Feedback')->findBy(
            array(
                'accountId' => $accountId
            ),
            array('sort' => 'ASC')
        );
    }

    /**
     * Find sorted enabled feed
     * @param SpecificationInterface $specification
     * @return array
     */
    public function findSortedFeedbacks(SpecificationInterface $specification)
    {
        return $this->match(
            new Spec\SortedLastN(
                $specification,
                'sort',
                'ASC',
                4
            )
        );
    }

    public function getLastFeedbacks(SpecificationInterface $specification, $num = 4)
    {
        return $this->match(
            new Spec\LimitLastN(
                $specification,
                $num
            )
        );
    }

    /**
     * @param SpecificationInterface $spec
     * @return array
     */
    public function getRatingsAverage(SpecificationInterface $spec)
    {

        return $this->match(
            new Spec\AsSingleScalar($spec, 'avg', 'rating')
        );
    }

    /**
     * @param SpecificationInterface $spec
     * @return array
     */
    public function getFeedbackCount(SpecificationInterface $spec)
    {
        return $this->match(
            new Spec\AsSingleScalar($spec)
        );
    }

    public function batchActivate($activateList, $inFeedbackList)
    {
        foreach ($inFeedbackList as $feedback) {
            $feedback->setIsEnabled(false);

            if (array_key_exists($feedback->getId(), $activateList)) {
                $feedback->setIsEnabled(true);
            }
            $this->getEntityManager()->persist($feedback);
        }
        $this->getEntityManager()->flush();
    }

    public function activateFeedback($id, $accountId)
    {
        $feedback = $this->getEntityManager()->getRepository('MFBFeedbackBundle:Feedback')->findOneBy(
            array(
                'id' => $id,
                'accountId' => $accountId
            )
        );
        if (!$feedback) {
            throw new NoResultException(
                'No feedback found for id '.$id
            );
        }
        $feedback->setIsEnabled(true);
        $this->getEntityManager()->persist($feedback);
        $this->getEntityManager()->flush();
    }


    /**
     * Matcher by specified specification
     *
     * @param SpecificationInterface $specification
     * @return array
     * @throws \InvalidArgumentException
     */
    public function match(SpecificationInterface $specification)
    {
        if (!$specification->supports($this->getEntityName())) {
            throw new \InvalidArgumentException("Specification not supported by this repository.");
        }

        $dqAlias  = 'fb';
        $qb = $this->createQueryBuilder($dqAlias);

        if ($specification instanceof Spec\AsInterface) {
            $specification->select($qb, $dqAlias);
        }

        if ($specification instanceof Spec\OrderInterface) {
            $specification->orderBy($qb, $dqAlias);
        }

        $expr = $specification->match($qb, $dqAlias);
        $query = $qb->where($expr)->getQuery();

        $specification->modifyQuery($query);

        return $query->getResult($query->getHydrationMode());
    }

}

<?php

namespace MFB\FeedbackBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Query;

/**
 * FeedbackRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FeedbackRepository extends EntityRepository implements FeedbackRepositoryInterface
{
    protected $qb;

    public function getLastEnabledFeedbacks($accountId, $accountChannelId, $num = 4)
    {

        return $this->getEntityManager()->getRepository('MFBFeedbackBundle:Feedback')->findBy(
            array(
                'accountId' => $accountId,
                'channelId' => $accountChannelId,
                'isEnabled' => 1
            ),
            array('id'=>'DESC'),
            $num
        );
    }

    public function getFeedbacks($criteria)
    {
        $query = $this->getEntityManager()->createQuery(
            'SELECT COUNT(fb.id)
            FROM MFBFeedbackBundle:Feedback fb
            WHERE fb.isEnabled = 1'
        );
        //$query->setParameter('channelId', $accountChannelId);


        return $this->match($query, $criteria);
    }

    public function getFeedbackCount(FeedbackSpecification $criteria)
    {
        $this->queryBuilder();
        $this->qb->select('count(fb.id)');
        return $this->match($criteria)->getResult(Query::HYDRATE_SINGLE_SCALAR);
    }


    /**
     * @param FeedbackSpecification $criteria
     * @return mixed
     */
    public function match(FeedbackSpecification $criteria)
    {

        if ($criteria->getChannelId() !== null) {
            $this->matchChannelId($criteria);
        }

        if ($criteria->getIsEnabled() !== null) {
            $this->matchIsEnabled($criteria);
        }

        return $this->qb->getQuery();
    }

    protected function matchIsEnabled(FeedbackSpecification $criteria)
    {
        $this->qb
            ->andWhere('fb.isEnabled = :isEnabled')
            ->setParameter('isEnabled', $criteria->getIsEnabled());
    }

    private function matchChannelId(FeedbackSpecification $criteria)
    {
        $this->qb
            ->andWhere('fb.channelId = :channelId')
            ->setParameter('channelId', $criteria->getChannelId());
    }

    protected function queryBuilder()
    {
        $this->qb = $this->createQueryBuilder('fb');
    }

}
